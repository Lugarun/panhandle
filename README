# PanHandler #

This software is released into the Public Domain
 -- Chris Warburton <chriswarbo@gmail.com>, 2014-09-30

## Intro ##

PanHandler is a simple Haskell script using PanDoc. It allows code blocks and
lines in PanDoc-compatible documents, eg. Markdown, to be "unwrapped" and become
part of the overall document.

Any code blocks or lines with an "unwrap" class will have their contents parsed
using Pandoc, then spliced into the document (inside a Div or Span). Currently
it is hard-coded to use Markdown, but I can add an option to override this on
request.

For example, we can unwrap the following HTML:

    Mumble mumble

    ```{.unwrap}
    <p>Some HTML</p>

     - A Markdown
     - List
    ```

    Groan groan

To give:

    Mumble mumble

    <p>Some HTML</p>

     - A Markdown
     - List

    Groan groan

## Usage Notes ##

### Wrappers ###

Code blocks will become Pandoc-native Div blocks, code lines will become
Pandoc-native Span elements. These won't affect rendering, but they may affect
traversals, eg. other Pandoc scripts and CSS.

### Attributes ###

All of the code block's attributes except for the "unwrap" class will be applied
to the resulting Div or Span:

```{#foo .bar .upper .unwrap baz="quux" something="nice"}
Some *emphasised* text
```

Will become:

<div id="foo" class="bar upper" baz="quux" something="nice">
Some *emphasised* text
</div>

### Replacement Order ###

PanHandler operates top-down, so blocks can be nested. For example:

    Level 1A

    `````{.unwrap}
    Level 2A

    ```{.unwrap}
    Level 3A
    ```

    ```
    Level 3B
    ```

    Level 2B
    `````

    Level 1B

Will become:

    Level 1A

    Level 2A

    Level 3A

    ```
    Level 3B
    ```

    Level 2B

    Level 1B

All code blocks are unwrapped first, then all inline code.

### Inline Snippets ###

Here's an example of PanHandler working on inline code snippets:

    I hope the following is `*emphasised*`{.unwrap}.

Will become:

    I hope the following is *emphasised*.

### No Straddling ###

PanHandler operates by splicing syntax trees together, *not* via text
replacement.

One consequence is that formatting cannot 'straddle two levels' of a document.
As an example, if we put asterisks inside and outside a code snippet:

    This will *not `be* emphasised`{.unwrap}.

They will remain as asterisks:

    This will \*not be\* emphasised.

They *will not* join together for emphasis, like this:

    This will *not be* emphasised.

### PanPipe ###

PanHandler may be useful to you as a standalone script, but it was originally
created to augment PanPipe. PanPipe can send the contents of code blocks to the
stdin of a UNIX shell command, and dump the stdout back into the block.

PanHandler allows these results to escape their blocks and become part of the
document.

### Testing ###

PanHandler's tests are in `test-real.hs`. This script uses the Arbitrary
instances from Pandoc's own test modules. Since these modules aren't exported as
part of Pandoc, the `test.sh` script will download Pandoc's source for you and
run the tests with those modules.

Note that the tests use Pandoc's "native" format, since the readMarkdown and
writeMarkdown functions aren't quite inverses of each other, which would cause a
lot of false positive failures.
